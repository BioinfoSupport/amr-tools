
nextflow.enable.dsl = 2
nextflow.enable.moduleBinaries = true
workflow.output.mode = 'copy'
resume = true

plugins {
  id 'nf-schema@2.4.1'
}
validation.help.enabled = true


params.long_reads  = []
params.short_reads = []
params.skip_seq_qc = false
params.assembler = [
	long_unicycler           : false,
  long_hybracter           : false,
  long_flye_medaka         : true,
  short_spades             : false,
	short_unicycler          : false,
	hybrid_unicycler         : false,
	hybrid_hybracter         : false,
	hybrid_flye_medaka_pilon : false
]
params.annot = [
    org_name           : null,
    skip_prokka        : true,
    skip_cgemlst       : false,
    skip_MLST          : false,
    skip_resfinder     : false,
    skip_amrfinderplus : false,
    skip_plasmidfinder : false,
    skip_mobtyper      : false,
    skip_orgfinder     : false,
    skip_speciator     : true,
    skip_plasmidfinder_longread  : false,
    skip_resfinder_longread      : false,
    skip_plasmidfinder_shortread : false,
    skip_resfinder_shortread     : false,

    default_mobtyper_args      : '',
    default_amrfinderplus_args : '',
    default_plasmidfinder_args : '',
    default_cgemlst_args       : null, // do not run by default
    default_MLST_args          : '',   // autodetect species by default
    default_prokka_args        : '--kingdom Bacteria'
]


profiles {
    docker {
        docker {
            enabled = true
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    arm64 {        
        process {
            withName: 'MEDAKA_.*' {
                container = 'docker.io/ontresearch/medaka:shac4e11bfa4e65668b28739ba32edc3af12baf7574-arm64'
            }
        }
    }

    hpc {
        env {
            NXF_TEMP = "${System.getenv('HOME')}/scratch/tmp"
        }
        
        apptainer {
            enabled = true
            runOptions = "-B/scratch -B/srv/beegfs/scratch/users -B${System.getenv('HOME')}"
            autoMounts = true
            cacheDir = "${System.getenv('HOME')}/scratch/singularity"
            pullTimeout = '1h'
        }

        process {
            executor = "slurm"
            queue = 'shared-cpu'
            resourceLimits = [ cpus: 32, memory: 64.GB, time: 11.h ]
        }
    }
    
    tiny {
            process {
                resourceLimits = [ cpus: 8, memory: 14.GB, time: 3.h ]
            }
    }
}


process.errorStrategy = 'ignore'
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]



manifest {
    name            = 'amr-genomics/amr-assemble'
    contributors    = [
        [
            name: 'Julien Prados',
            affiliation: '',
            email: 'julien.prados@unige.ch',
            github: '',
            contribution: ['author', 'maintainer'],
            orcid: ''
        ],
    ]
    homePage        = 'https://gitlab.unige.ch/amr-assemble'
    description     = 'De novo assembly of bacterial genomes.'
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=25.10.0'
    version         = 'v0.1'
    doi             = ''
}

